import cv2
import numpy as np

# –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–≤–µ—Ç–æ–≤ –≤ HSV –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–ª–æ—Å —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤
Colour_Range = [
    [(0, 0, 0), (180, 255, 30), "BLACK", 0, (0, 0, 0)],
    [(0, 50, 10), (15, 255, 100), "BROWN", 1, (0, 51, 102)],
    [(0, 100, 50), (10, 255, 255), "RED", 2, (0, 0, 255)],
    [(5, 100, 100), (15, 255, 255), "ORANGE", 3, (0, 128, 255)],
    [(20, 100, 100), (30, 255, 255), "YELLOW", 4, (0, 255, 255)],
    [(35, 50, 50), (85, 255, 255), "GREEN", 5, (0, 255, 0)],
    [(100, 100, 50), (130, 255, 255), "BLUE", 6, (255, 0, 0)],
    [(130, 50, 50), (160, 255, 255), "VIOLET", 7, (255, 0, 127)],
    [(0, 0, 40), (180, 50, 100), "GRAY", 8, (128, 128, 128)],
    [(0, 0, 200), (180, 30, 255), "WHITE", 9, (255, 255, 255)],
    [(15, 50, 50), (25, 255, 255), "GOLD", -1, (0, 215, 255)],
    [(0, 0, 150), (180, 30, 200), "SILVER", -2, (192, 192, 192)]
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ (—Ç.–∫. –∫—Ä–∞—Å–Ω—ã–π –≤ HSV –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç 0)
Red_low2 = (170, 100, 50)
Red_high2 = (180, 255, 255)

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞
min_area = 100

def preprocess_resistor_image(img):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞"""
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
    kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
    img = cv2.filter2D(img, -1, kernel)
    
    # –ë–∏–ª–∏–Ω–µ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
    img = cv2.bilateralFilter(img, 9, 75, 75)
    
    return img

def validContours(cont):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—É—Ä–æ–≤"""
    if cv2.contourArea(cont) < min_area:
        return False
    
    x, y, w, h = cv2.boundingRect(cont)
    aspect_ratio = float(w) / h
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
    if aspect_ratio > 3.0 or aspect_ratio < 0.1:
        return False
        
    return True

def findBands(img):
    """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å –Ω–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–µ"""
    img_processed = preprocess_resistor_image(img)
    img_hsv = cv2.cvtColor(img_processed, cv2.COLOR_BGR2HSV)
    img_gray = cv2.cvtColor(img_processed, cv2.COLOR_BGR2GRAY)
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è threshold –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π
    thresh = cv2.adaptiveThreshold(img_gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                   cv2.THRESH_BINARY, 11, 2)
    thresh = cv2.bitwise_not(thresh)
    
    bandpos = []

    for clr in Colour_Range:
        mask = cv2.inRange(img_hsv, np.array(clr[0]), np.array(clr[1]))
        
        # –û—Å–æ–±–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        if clr[2] == "RED":
            red_mask2 = cv2.inRange(img_hsv, np.array(Red_low2), np.array(Red_high2))
            mask = cv2.bitwise_or(mask, red_mask2)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ threshold
        mask = cv2.bitwise_and(mask, thresh)
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
        kernel = np.ones((3,3), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for cont in contours:
            if validContours(cont):
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ª–µ–≤—É—é —Ç–æ—á–∫—É –∫–æ–Ω—Ç—É—Ä–∞
                leftmost = tuple(cont[cont[:,:,0].argmin()][0])
                bandpos.append(leftmost + (clr[2], clr[3]))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ—Å—ã –ø–æ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    return sorted(bandpos, key=lambda x: x[0])

def calculate_resistance_from_bands(bands):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ—Å"""
    if not bands or len(bands) < 3:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–æ—Å
    num_bands = len(bands)
    
    try:
        if num_bands in [3, 4]:
            # 4-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞: —Ü–∏—Ñ—Ä–∞, —Ü–∏—Ñ—Ä–∞, –º–Ω–æ–∂–∏—Ç–µ–ª—å, –¥–æ–ø—É—Å–∫
            digits = [band[3] for band in bands[:2]]
            multiplier = bands[2][3]
            
            # –ï—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (–∑–æ–ª–æ—Ç–æ–π/—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–æ–±–æ
            if multiplier < 0:
                if multiplier == -1:  # –∑–æ–ª–æ—Ç–æ–π
                    multiplier_val = 0.1
                else:  # —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π
                    multiplier_val = 0.01
            else:
                multiplier_val = 10 ** multiplier
                
            resistance = (digits[0] * 10 + digits[1]) * multiplier_val
            
        elif num_bands >= 5:
            # 5-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞: —Ü–∏—Ñ—Ä–∞, —Ü–∏—Ñ—Ä–∞, —Ü–∏—Ñ—Ä–∞, –º–Ω–æ–∂–∏—Ç–µ–ª—å, –¥–æ–ø—É—Å–∫
            digits = [band[3] for band in bands[:3]]
            multiplier = bands[3][3]
            
            if multiplier < 0:
                if multiplier == -1:
                    multiplier_val = 0.1
                else:
                    multiplier_val = 0.01
            else:
                multiplier_val = 10 ** multiplier
                
            resistance = (digits[0] * 100 + digits[1] * 10 + digits[2]) * multiplier_val
        
        else:
            return None
            
        return resistance
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return None

def format_resistance(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    if value is None:
        return None
        
    if value >= 1000000:
        return f"{value / 1000000:.2f} –ú–û–º"
    elif value >= 1000:
        return f"{value / 1000:.2f} –∫–û–º"
    elif value < 1:
        return f"{value:.2f} –û–º"
    else:
        return f"{int(value)} –û–º"

def recognize_resistor_cv(image):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"""
    try:
        bands = findBands(image)
        
        if not bands:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã"
        
        resistance_value = calculate_resistance_from_bands(bands)
        
        if resistance_value is None:
            return f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(bands)} –ø–æ–ª–æ—Å, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–º–∏–Ω–∞–ª"
        
        formatted_value = format_resistance(resistance_value)
        bands_info = " ‚Üí ".join([band[2] for band in bands[:4]])
        
        return f"üéØ *–ù–æ–º–∏–Ω–∞–ª:* {formatted_value}\nüé® *–ü–æ–ª–æ—Å—ã:* {bands_info}\n*–ú–µ—Ç–æ–¥:* –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    test_image = cv2.imread('test_resistor.jpg')
    if test_image is not None:
        result = recognize_resistor_cv(test_image)
        print(result)
    else:
        print("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")