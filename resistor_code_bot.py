import logging
import re
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=os.getenv('BOT_LOG_LEVEL', 'INFO')
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN not found in environment variables!")
    exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from resistor_data import COLOR_CODES, MULTIPLIERS, TOLERANCE, EN_TO_RU_COLORS, INPUT_NORMALIZATION, RU_TO_EN_COLORS
    from smd_decoder import smd_to_resistance, resistance_to_smd, validate_smd_code
except ImportError as e:
    logging.error(f"‚ùå Error importing modules: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    COLOR_CODES, MULTIPLIERS, TOLERANCE, EN_TO_RU_COLORS, INPUT_NORMALIZATION, RU_TO_EN_COLORS = {}, {}, {}, {}, {}, {}
    def smd_to_resistance(code):
        return None
    def resistance_to_smd(value):
        return "SMD module not available"
    def validate_smd_code(code):
        return False

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ —è–∑—ã–∫–∞
user_context = {}

# –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard(language='ru'):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if language == 'en':
        keyboard = [
            [KeyboardButton("üé® Cylindrical"), KeyboardButton("üî§ SMD Resistors")],
            [KeyboardButton("üåê Language"), KeyboardButton("‚ÑπÔ∏è Help"), KeyboardButton("üè† Main Menu")]
        ]
    else:
        keyboard = [
            [KeyboardButton("üé® –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ"), KeyboardButton("üî§ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã")],
            [KeyboardButton("üåê –Ø–∑—ã–∫"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_language_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = [
        [KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá∫üá∏ English")],
        [KeyboardButton("üîô Back")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def normalize_color_input(color):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ —Ü–≤–µ—Ç–∞, –ø—Ä–∏–≤–æ–¥—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É"""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    color_lower = color.lower().strip()
    
    # –ó–∞–º–µ–Ω—è–µ–º –±—É–∫–≤—É '—ë' –Ω–∞ '–µ' –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    color_lower = color_lower.replace('—ë', '–µ')
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    normalized = INPUT_NORMALIZATION.get(color_lower, color_lower)
    
    # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º '—ë' –Ω–∞ '–µ' –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    normalized = normalized.replace('—ë', '–µ')
    
    return normalized

def convert_colors_to_target_language(colors, target_language='ru'):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫"""
    converted_colors = []
    for color in colors:
        color_lower = color.lower()
        if target_language == 'en' and color_lower in RU_TO_EN_COLORS:
            converted_colors.append(RU_TO_EN_COLORS[color_lower])
        elif target_language == 'ru' and color_lower in EN_TO_RU_COLORS:
            converted_colors.append(EN_TO_RU_COLORS[color_lower])
        else:
            # –ï—Å–ª–∏ —Ü–≤–µ—Ç —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            converted_colors.append(color)
    return converted_colors

def get_user_language(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_context.get(user_id, {}).get('language', 'ru')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    if user_id not in user_context:
        user_context[user_id] = {'mode': 'main', 'language': 'ru'}
    else:
        user_context[user_id]['mode'] = 'main'
    
    language = get_user_language(user_id)
    
    if language == 'en':
        welcome_text = """
ü§ñ *Resistor Code Bot* - Universal resistor assistant

*Available features:*

üé® *Cylindrical Resistors:*
  ‚Ä¢ Determine value by colors
  ‚Ä¢ Get color coding by value (4 and 5 bands)

üî§ *SMD Resistors:*
  ‚Ä¢ Decode code to value
  ‚Ä¢ Generate code by value
  ‚Ä¢ Support for E24, E96 series

*Just send:*
‚Ä¢ Band colors (4 or 5 colors) - e.g.: `yellow violet red gold`
‚Ä¢ Resistor value (1k, 470 Ohm, 2.2M)
‚Ä¢ SMD code (103, 4R7, 01C)

*Use buttons below for navigation:*
        """
    else:
        welcome_text = """
ü§ñ *Resistor Code Bot* - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üé® *–¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã:*
  ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É (4 –∏ 5 –ø–æ–ª–æ—Å)

üî§ *SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã:*
  ‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –≤ –Ω–æ–º–∏–Ω–∞–ª
  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ E24, E96 —Å–µ—Ä–∏–π

*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:*
‚Ä¢ –¶–≤–µ—Ç–∞ –ø–æ–ª–æ—Å (4 –∏–ª–∏ 5 —Ü–≤–µ—Ç–æ–≤) - –Ω–∞–ø—Ä–∏–º–µ—Ä: `–∂—ë–ª—Ç—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π`
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ (1–∫, 470 –û–º, 2.2–ú)
‚Ä¢ SMD –∫–æ–¥ (103, 4R7, 01C)

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:*
        """
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode='Markdown', 
        reply_markup=get_main_keyboard(language)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    user_context[user_id]['mode'] = 'main'
    
    language = get_user_language(user_id)
    
    if language == 'en':
        help_text = """
üìñ *Usage Help*

*Basic commands:*
`/start` - start working
`/help` - show this help

*Request examples:*

*Cylindrical Resistors:*
Colors ‚Üí Value: `brown black red gold`
Value ‚Üí Colors: `1k`, `470 Ohm`

*SMD Resistors:*
SMD code ‚Üí Value: `103`, `4R7`
Value ‚Üí SMD code: `10k`, `4.7 Ohm`

*Tips:*
‚Ä¢ Bot automatically detects your request type
‚Ä¢ Use buttons to select mode
‚Ä¢ Both Russian and English color names are supported
‚Ä¢ Both 4-band and 5-band markings are shown
        """
    else:
        help_text = """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
`/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
`/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*

*–¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã:*
–¶–≤–µ—Ç–∞ ‚Üí –ù–æ–º–∏–Ω–∞–ª: `–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —á—ë—Ä–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π`
–ù–æ–º–∏–Ω–∞–ª ‚Üí –¶–≤–µ—Ç–∞: `1–∫`, `470 –û–º`

*SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã:*
SMD –∫–æ–¥ ‚Üí –ù–æ–º–∏–Ω–∞–ª: `103`, `4R7`
–ù–æ–º–∏–Ω–∞–ª ‚Üí SMD –∫–æ–¥: `10–∫`, `4.7 –û–º`

*–ü–æ–¥—Å–∫–∞–∑–∫–∏:*
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
‚Ä¢ –î–ª—è –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ–±–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏: 4-–ø–æ–ª–æ—Å–Ω–∞—è –∏ 5-–ø–æ–ª–æ—Å–Ω–∞—è
        """
    await update.message.reply_text(help_text, parse_mode='Markdown', 
                                  reply_markup=get_main_keyboard(language))

async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    text = update.message.text
    language = get_user_language(user_id)
    
    if text in ["üé® –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ", "üé® Cylindrical"]:
        user_context[user_id]['mode'] = 'throughhole'
        if language == 'en':
            help_text = """
üé® *Mode: Cylindrical Resistors*

Now send:
‚Ä¢ Band colors to determine value
‚Ä¢ Value to get color coding

*Color examples:*
`red violet yellow gold`
`brown black red silver`

*Value examples:*
`1.5k` 
`470 Ohm`
`2.2M`

*Bot will show both markings:*
‚Ä¢ 4-band (2 digits, multiplier, tolerance)
‚Ä¢ 5-band (3 digits, multiplier, tolerance)
            """
        else:
            help_text = """
üé® *–†–µ–∂–∏–º: –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã*

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ –¶–≤–µ—Ç–∞ –ø–æ–ª–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–∞
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏

*–ü—Ä–∏–º–µ—Ä—ã —Ü–≤–µ—Ç–æ–≤:*
`–∫—Ä–∞—Å–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∂—ë–ª—Ç—ã–π –∑–æ–ª–æ—Ç–æ–π`
`–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —á—ë—Ä–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π`

*–ü—Ä–∏–º–µ—Ä—ã –Ω–æ–º–∏–Ω–∞–ª–æ–≤:*
`1.5–∫` 
`470 –û–º`
`2.2–ú`

*–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –æ–±–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:*
‚Ä¢ 4-–ø–æ–ª–æ—Å–Ω–∞—è (2 —Ü–∏—Ñ—Ä—ã, –º–Ω–æ–∂–∏—Ç–µ–ª—å, –¥–æ–ø—É—Å–∫)
‚Ä¢ 5-–ø–æ–ª–æ—Å–Ω–∞—è (3 —Ü–∏—Ñ—Ä—ã, –º–Ω–æ–∂–∏—Ç–µ–ª—å, –¥–æ–ø—É—Å–∫)
            """
        await update.message.reply_text(help_text, parse_mode='Markdown', 
                                      reply_markup=get_main_keyboard(language))
        
    elif text in ["üî§ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã", "üî§ SMD Resistors"]:
        user_context[user_id]['mode'] = 'smd'
        if language == 'en':
            help_text = """
üî§ *Mode: SMD Resistors*

Now send:
‚Ä¢ SMD code to decode
‚Ä¢ Value to generate code

*Code examples:*
`103` = 10 kOhm
`4R7` = 4.7 Ohm  
`01C` = 10 kOhm (E96)
`R047` = 0.047 Ohm

*Value examples:*
`10k`, `4.7 Ohm`, `100k`, `0.47`

*Supported formats:*
‚Ä¢ 3-digit code (E24 series)
‚Ä¢ 4-digit code (E96 series)  
‚Ä¢ R-codes (less than 100 Ohm)
            """
        else:
            help_text = """
üî§ *–†–µ–∂–∏–º: SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã*

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ SMD –∫–æ–¥ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤:*
`103` = 10 –∫–û–º
`4R7` = 4.7 –û–º  
`01C` = 10 –∫–û–º (E96)
`R047` = 0.047 –û–º

*–ü—Ä–∏–º–µ—Ä—ã –Ω–æ–º–∏–Ω–∞–ª–æ–≤:*
`10–∫`, `4.7 –û–º`, `100–∫`, `0.47`

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ 3-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (E24 —Å–µ—Ä–∏—è)
‚Ä¢ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (E96 —Å–µ—Ä–∏—è)  
‚Ä¢ –ö–æ–¥—ã —Å R (–º–µ–Ω—å—à–µ 100 –û–º)
            """
        await update.message.reply_text(help_text, parse_mode='Markdown', 
                                      reply_markup=get_main_keyboard(language))
        
    elif text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è Help"]:
        await help_command(update, context)
        
    elif text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        user_context[user_id]['mode'] = 'main'
        if language == 'en':
            welcome_text = """
üè† *Main Menu*

Select operation mode or just send a request:

*Request examples:*
‚Ä¢ Colors: `brown black red gold`
‚Ä¢ Value: `1k`, `470 Ohm`  
‚Ä¢ SMD code: `103`, `4R7`

Bot automatically detects your request type!

*Both Russian and English color names are supported*
            """
        else:
            welcome_text = """
üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å:

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ –¶–≤–µ—Ç–∞: `–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —á—ë—Ä–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π`
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª: `1–∫`, `470 –û–º`  
‚Ä¢ SMD –∫–æ–¥: `103`, `4R7`

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤*
            """
        await update.message.reply_text(welcome_text, parse_mode='Markdown', 
                                      reply_markup=get_main_keyboard(language))
    
    elif text in ["üåê –Ø–∑—ã–∫", "üåê Language"]:
        user_context[user_id]['mode'] = 'language'
        if language == 'en':
            text = "üåê *Select Language*"
        else:
            text = "üåê *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫*"
        await update.message.reply_text(text, parse_mode='Markdown', 
                                      reply_markup=get_language_keyboard())
    
    elif text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user_context[user_id]['language'] = 'ru'
        user_context[user_id]['mode'] = 'main'
        await update.message.reply_text("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π", 
                                      reply_markup=get_main_keyboard('ru'))
    
    elif text == "üá∫üá∏ English":
        user_context[user_id]['language'] = 'en'
        user_context[user_id]['mode'] = 'main'
        await update.message.reply_text("‚úÖ Language changed to English", 
                                      reply_markup=get_main_keyboard('en'))
    
    elif text == "üîô Back":
        user_context[user_id]['mode'] = 'main'
        await update.message.reply_text("üè†", 
                                      reply_markup=get_main_keyboard(language))

def colors_to_resistance(colors):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–æ–º–∏–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ —Ü–≤–µ—Ç–æ–≤
        normalized_colors = [normalize_color_input(color) for color in colors]
        
        if len(normalized_colors) == 4:  # 4-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
            digit1 = COLOR_CODES[normalized_colors[0]]
            digit2 = COLOR_CODES[normalized_colors[1]]
            multiplier = MULTIPLIERS[normalized_colors[2]]
            tolerance = TOLERANCE.get(normalized_colors[3], '¬±20%')
            
            resistance = (digit1 * 10 + digit2) * multiplier
            
        elif len(normalized_colors) == 5:  # 5-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
            digit1 = COLOR_CODES[normalized_colors[0]]
            digit2 = COLOR_CODES[normalized_colors[1]]
            digit3 = COLOR_CODES[normalized_colors[2]]
            multiplier = MULTIPLIERS[normalized_colors[3]]
            tolerance = TOLERANCE.get(normalized_colors[4], '¬±20%')
            
            resistance = (digit1 * 100 + digit2 * 10 + digit3) * multiplier
            
        else:
            return None, "Invalid number of colors. Use 4 or 5 colors."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if resistance >= 1000000:
            result = f"{resistance / 1000000:.2f} MOhm"
        elif resistance >= 1000:
            result = f"{resistance / 1000:.2f} kOhm"
        else:
            result = f"{resistance:.0f} Ohm"
            
        return result, tolerance
        
    except Exception as e:
        return None, f"Error: {str(e)}. Check color input correctness."

def resistance_to_colors(resistance_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞ –≤ —Ü–≤–µ—Ç–æ–≤—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –¥–ª—è 4 –∏ 5 –ø–æ–ª–æ—Å"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ)
        match = re.search(r'(\d+\.?\d*)\s*([–∫kKmM]?)\s*[–æ–ûoO]?[hmHM]?', resistance_str)
        if not match:
            return None, None, "Invalid format. Example: '1k', '470 Ohm', '2.2M'"
        
        value, unit = match.groups()
        value = float(value)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –û–º—ã
        if unit and unit.lower() in ['–∫', 'k']:
            value *= 1000
        elif unit and unit.lower() in ['–º', 'm']:
            value *= 1000000
        
        resistance = value
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        reverse_color_map = {v: k for k, v in COLOR_CODES.items() if v >= 0}
        reverse_multiplier_map = {v: k for k, v in MULTIPLIERS.items()}
        
        # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è 4 –ø–æ–ª–æ—Å
        colors_4 = calculate_4_band_colors(resistance, reverse_color_map, reverse_multiplier_map)
        
        # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è 5 –ø–æ–ª–æ—Å
        colors_5 = calculate_5_band_colors(resistance, reverse_color_map, reverse_multiplier_map)
        
        return colors_4, colors_5, None
        
    except Exception as e:
        return None, None, f"Error: {str(e)}"

def calculate_4_band_colors(resistance, reverse_color_map, reverse_multiplier_map):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è 4-–ø–æ–ª–æ—Å–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        if resistance < 0.1:
            return None  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–ª—è 4-–ø–æ–ª–æ—Å–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        multiplier_value = 1
        value = resistance
        
        while value < 10 and multiplier_value > 0.01:
            multiplier_value /= 10
            value = resistance / multiplier_value
        
        while value >= 100 and multiplier_value < 1000000000:
            multiplier_value *= 10
            value = resistance / multiplier_value
        
        if value < 10 or value >= 100:
            return None
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
        value_int = int(round(value))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä—ã
        digit1 = value_int // 10
        digit2 = value_int % 10
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞
        color1 = reverse_color_map.get(digit1)
        color2 = reverse_color_map.get(digit2)
        color_multiplier = reverse_multiplier_map.get(multiplier_value, 'black')
        color_tolerance = 'gold'
        
        if color1 and color2 and color_multiplier:
            return [color1, color2, color_multiplier, color_tolerance]
        return None
        
    except Exception:
        return None

def calculate_5_band_colors(resistance, reverse_color_map, reverse_multiplier_map):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è 5-–ø–æ–ª–æ—Å–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        if resistance < 0.01:
            return None  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–ª—è 5-–ø–æ–ª–æ—Å–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        multiplier_value = 1
        value = resistance
        
        while value < 100 and multiplier_value > 0.001:
            multiplier_value /= 10
            value = resistance / multiplier_value
        
        while value >= 1000 and multiplier_value < 100000000:
            multiplier_value *= 10
            value = resistance / multiplier_value
        
        if value < 100 or value >= 1000:
            return None
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
        value_int = int(round(value))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä—ã
        digit1 = value_int // 100
        digit2 = (value_int // 10) % 10
        digit3 = value_int % 10
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞
        color1 = reverse_color_map.get(digit1)
        color2 = reverse_color_map.get(digit2)
        color3 = reverse_color_map.get(digit3)
        color_multiplier = reverse_multiplier_map.get(multiplier_value, 'black')
        color_tolerance = 'brown'
        
        if color1 and color2 and color3 and color_multiplier:
            return [color1, color2, color3, color_multiplier, color_tolerance]
        return None
        
    except Exception:
        return None

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    language = get_user_language(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if user_id not in user_context:
        user_context[user_id] = {'mode': 'main', 'language': 'ru'}
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menu_buttons = ["üé® –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ", "üî§ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                   "üé® Cylindrical", "üî§ SMD Resistors", "‚ÑπÔ∏è Help", "üè† Main Menu",
                   "üåê –Ø–∑—ã–∫", "üåê Language", "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá∏ English", "üîô Back"]
    
    if text in menu_buttons:
        await handle_menu_buttons(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_mode = user_context[user_id].get('mode', 'main')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    words = text.split()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤
    normalized_words = [normalize_color_input(word) for word in words]
    
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Ü–≤–µ—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ü–≤–µ—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if normalized_words and all(word.lower() in COLOR_CODES for word in normalized_words):
        # –ó–∞–ø—Ä–æ—Å —Å —Ü–≤–µ—Ç–∞–º–∏ - —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–∏—Å—Ç–æ—Ä
        resistance, tolerance = colors_to_resistance(words)
        if resistance:
            if language == 'en':
                response = f"üéØ *Resistor value:* {resistance}\nüìä *Tolerance:* {tolerance}"
            else:
                response = f"üéØ *–ù–æ–º–∏–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞:* {resistance}\nüìä *–î–æ–ø—É—Å–∫:* {tolerance}"
        else:
            response = tolerance
            
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω SMD –∫–æ–¥ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ SMD –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    elif validate_smd_code(text):
        # SMD –∫–æ–¥
        result = smd_to_resistance(text)
        if result:
            value, code_type = result
            if language == 'en':
                response = f"üî§ *SMD code:* `{text.upper()}`\nüíé *Value:* {value}\nüìã *Type:* {code_type}"
            else:
                response = f"üî§ *SMD –∫–æ–¥:* `{text.upper()}`\nüíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\nüìã *–¢–∏–ø:* {code_type}"
        else:
            if language == 'en':
                response = f"‚ùå Could not decode SMD code: `{text}`"
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å SMD –∫–æ–¥: `{text}`"
            
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    elif current_mode == 'throughhole':
        # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        colors_4, colors_5, error = resistance_to_colors(text)
        if error:
            response = error
        elif colors_4 or colors_5:
            if language == 'en':
                response = "üé® *Color coding:*\n\n"
            else:
                response = "üé® *–¶–≤–µ—Ç–æ–≤—ã–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:*\n\n"
            
            if colors_4:
                target_colors_4 = convert_colors_to_target_language(colors_4, language)
                colors_str_4 = ' ‚Üí '.join(target_colors_4)
                if language == 'en':
                    response += f"*4-band:*\n`{colors_str_4}`\n\n"
                else:
                    response += f"*4-–ø–æ–ª–æ—Å–Ω–∞—è:*\n`{colors_str_4}`\n\n"
            else:
                if language == 'en':
                    response += "*4-band:* not available for this value\n\n"
                else:
                    response += "*4-–ø–æ–ª–æ—Å–Ω–∞—è:* –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞\n\n"
                    
            if colors_5:
                target_colors_5 = convert_colors_to_target_language(colors_5, language)
                colors_str_5 = ' ‚Üí '.join(target_colors_5)
                if language == 'en':
                    response += f"*5-band:*\n`{colors_str_5}`"
                else:
                    response += f"*5-–ø–æ–ª–æ—Å–Ω–∞—è:*\n`{colors_str_5}`"
            else:
                if language == 'en':
                    response += "*5-band:* not available for this value"
                else:
                    response += "*5-–ø–æ–ª–æ—Å–Ω–∞—è:* –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞"
        else:
            if language == 'en':
                response = ("‚ùå Could not recognize value for color coding.\n\n"
                          "Examples:\n"
                          "‚Ä¢ `1k` ‚Üí 1000 Ohm\n"
                          "‚Ä¢ `470 Ohm` ‚Üí 470 Ohm\n"
                          "‚Ä¢ `2.2M` ‚Üí 2.2 MOhm")
            else:
                response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏.\n\n"
                          "–ü—Ä–∏–º–µ—Ä—ã:\n"
                          "‚Ä¢ `1–∫` ‚Üí 1000 –û–º\n"
                          "‚Ä¢ `470 –û–º` ‚Üí 470 –û–º\n"
                          "‚Ä¢ `2.2–ú` ‚Üí 2.2 –ú–û–º")
            
    elif current_mode == 'smd':
        # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è SMD –∫–æ–¥–∞
        smd_result = resistance_to_smd(text)
        if smd_result and "Could not" not in smd_result and "Error" not in smd_result and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in smd_result and "–û—à–∏–±–∫–∞" not in smd_result:
            if isinstance(smd_result, tuple) and len(smd_result) == 3:
                value, codes, series = smd_result
                codes_str = "\n".join([f"‚Ä¢ `{code}` ({s})" for code, s in zip(codes, series)])
                if language == 'en':
                    response = f"üíé *Value:* {value}\nüî§ *SMD codes:*\n{codes_str}"
                else:
                    response = f"üíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\nüî§ *SMD –∫–æ–¥—ã:*\n{codes_str}"
            else:
                response = f"üíé {smd_result}"
        else:
            if language == 'en':
                response = ("‚ùå Could not generate SMD code.\n\n"
                          "Examples:\n"
                          "‚Ä¢ `10k` ‚Üí 103, 01C\n"
                          "‚Ä¢ `4.7 Ohm` ‚Üí 4R7\n"
                          "‚Ä¢ `100k` ‚Üí 104, 01D")
            else:
                response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SMD –∫–æ–¥.\n\n"
                          "–ü—Ä–∏–º–µ—Ä—ã:\n"
                          "‚Ä¢ `10–∫` ‚Üí 103, 01C\n"
                          "‚Ä¢ `4.7 –û–º` ‚Üí 4R7\n"
                          "‚Ä¢ `100–∫` ‚Üí 104, 01D")
    
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ SMD
        smd_result = resistance_to_smd(text)
        if smd_result and "Could not" not in smd_result and "Error" not in smd_result and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in smd_result and "–û—à–∏–±–∫–∞" not in smd_result:
            if isinstance(smd_result, tuple) and len(smd_result) == 3:
                value, codes, series = smd_result
                codes_str = "\n".join([f"‚Ä¢ `{code}` ({s})" for code, s in zip(codes, series)])
                if language == 'en':
                    response = f"üíé *Value:* {value}\nüî§ *SMD codes:*\n{codes_str}"
                else:
                    response = f"üíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\nüî§ *SMD –∫–æ–¥—ã:*\n{codes_str}"
            else:
                response = f"üíé {smd_result}"
        else:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π
            colors_4, colors_5, error = resistance_to_colors(text)
            if error:
                response = error
            elif colors_4 or colors_5:
                if language == 'en':
                    response = "üé® *Color coding:*\n\n"
                else:
                    response = "üé® *–¶–≤–µ—Ç–æ–≤—ã–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:*\n\n"
                
                if colors_4:
                    target_colors_4 = convert_colors_to_target_language(colors_4, language)
                    colors_str_4 = ' ‚Üí '.join(target_colors_4)
                    if language == 'en':
                        response += f"*4-band:*\n`{colors_str_4}`\n\n"
                    else:
                        response += f"*4-–ø–æ–ª–æ—Å–Ω–∞—è:*\n`{colors_str_4}`\n\n"
                else:
                    if language == 'en':
                        response += "*4-band:* not available for this value\n\n"
                    else:
                        response += "*4-–ø–æ–ª–æ—Å–Ω–∞—è:* –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞\n\n"
                        
                if colors_5:
                    target_colors_5 = convert_colors_to_target_language(colors_5, language)
                    colors_str_5 = ' ‚Üí '.join(target_colors_5)
                    if language == 'en':
                        response += f"*5-band:*\n`{colors_str_5}`"
                    else:
                        response += f"*5-–ø–æ–ª–æ—Å–Ω–∞—è:*\n`{colors_str_5}`"
                else:
                    if language == 'en':
                        response += "*5-band:* not available for this value"
                    else:
                        response += "*5-–ø–æ–ª–æ—Å–Ω–∞—è:* –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞"
            else:
                if language == 'en':
                    response = ("‚ùå Could not recognize request.\n\n"
                              "Possible options:\n"
                              "‚Ä¢ Band colors: `red violet yellow gold`\n"
                              "‚Ä¢ Value: `1k`, `470 Ohm`\n"
                              "‚Ä¢ SMD code: `103`, `4R7`\n\n"
                              "Use buttons to select mode:")
                else:
                    response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å.\n\n"
                              "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
                              "‚Ä¢ –¶–≤–µ—Ç–∞ –ø–æ–ª–æ—Å: `–∫—Ä–∞—Å–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∂—ë–ª—Ç—ã–π –∑–æ–ª–æ—Ç–æ–π`\n"
                              "‚Ä¢ –ù–æ–º–∏–Ω–∞–ª: `1–∫`, `470 –û–º`\n"
                              "‚Ä¢ SMD –∫–æ–¥: `103`, `4R7`\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞:")
    
    await update.message.reply_text(response, parse_mode='Markdown', 
                                  reply_markup=get_main_keyboard(language))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("ü§ñ Bot started with multilingual support!")
        print("=" * 50)
        print("ü§ñ Resistor Code Bot successfully started!")
        print("üìç Use /start in Telegram")
        print("üéØ Features: color coding + SMD codes")
        print("üåê Multilingual support: Russian & English")
        print("üîß Press Ctrl+C to stop")
        print("=" * 50)
        
        application.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå Critical error: {e}")
        exit(1)

if __name__ == '__main__':
    main()