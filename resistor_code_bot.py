import logging
import re
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from PIL import Image
import pytesseract
import io
import cv2
import numpy as np
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=os.getenv('BOT_LOG_LEVEL', 'INFO')
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract (–¥–ª—è Windows)
tesseract_path = os.getenv('TESSERACT_PATH')
if tesseract_path and os.path.exists(tesseract_path):
    pytesseract.pytesseract.tesseract_cmd = tesseract_path

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from resistor_cv import recognize_resistor_cv
    from smd_decoder import smd_to_resistance, resistance_to_smd, validate_smd_code
except ImportError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def recognize_resistor_cv(img):
        return "–ú–æ–¥—É–ª—å CV –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    def smd_to_resistance(code):
        return None
    
    def resistance_to_smd(value):
        return "–ú–æ–¥—É–ª—å SMD –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    def validate_smd_code(code):
        return False

# –¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ (—Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ)
COLOR_CODES = {
    '—á–µ—Ä–Ω—ã–π': 0, 'black': 0,
    '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 1, 'brown': 1,
    '–∫—Ä–∞—Å–Ω—ã–π': 2, 'red': 2,
    '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': 3, 'orange': 3,
    '–∂–µ–ª—Ç—ã–π': 4, 'yellow': 4,
    '–∑–µ–ª–µ–Ω—ã–π': 5, 'green': 5,
    '—Å–∏–Ω–∏–π': 6, 'blue': 6,
    '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 7, 'violet': 7, 'purple': 7,
    '—Å–µ—Ä—ã–π': 8, 'gray': 8, 'grey': 8,
    '–±–µ–ª—ã–π': 9, 'white': 9,
    '–∑–æ–ª–æ—Ç–æ–π': -1, 'gold': -1,
    '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': -2, 'silver': -2
}

MULTIPLIERS = {
    '—á–µ—Ä–Ω—ã–π': 1, 'black': 1,
    '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 10, 'brown': 10,
    '–∫—Ä–∞—Å–Ω—ã–π': 100, 'red': 100,
    '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': 1000, 'orange': 1000,
    '–∂–µ–ª—Ç—ã–π': 10000, 'yellow': 10000,
    '–∑–µ–ª–µ–Ω—ã–π': 100000, 'green': 100000,
    '—Å–∏–Ω–∏–π': 1000000, 'blue': 1000000,
    '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 10000000, 'violet': 10000000, 'purple': 10000000,
    '—Å–µ—Ä—ã–π': 100000000, 'gray': 100000000, 'grey': 100000000,
    '–±–µ–ª—ã–π': 1000000000, 'white': 1000000000,
    '–∑–æ–ª–æ—Ç–æ–π': 0.1, 'gold': 0.1,
    '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': 0.01, 'silver': 0.01
}

TOLERANCE = {
    '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': '¬±1%', 'brown': '¬±1%',
    '–∫—Ä–∞—Å–Ω—ã–π': '¬±2%', 'red': '¬±2%',
    '–∑–µ–ª–µ–Ω—ã–π': '¬±0.5%', 'green': '¬±0.5%',
    '—Å–∏–Ω–∏–π': '¬±0.25%', 'blue': '¬±0.25%',
    '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': '¬±0.1%', 'violet': '¬±0.1%', 'purple': '¬±0.1%',
    '—Å–µ—Ä—ã–π': '¬±0.05%', 'gray': '¬±0.05%', 'grey': '¬±0.05%',
    '–∑–æ–ª–æ—Ç–æ–π': '¬±5%', 'gold': '¬±5%',
    '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': '¬±10%', 'silver': '¬±10%',
    '–Ω–µ—Ç': '¬±20%'
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Ä—É—Å—Å–∫–∏–µ
EN_TO_RU_COLORS = {
    'black': '—á–µ—Ä–Ω—ã–π',
    'brown': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', 
    'red': '–∫—Ä–∞—Å–Ω—ã–π',
    'orange': '–æ—Ä–∞–Ω–∂–µ–≤—ã–π',
    'yellow': '–∂–µ–ª—Ç—ã–π',
    'green': '–∑–µ–ª–µ–Ω—ã–π',
    'blue': '—Å–∏–Ω–∏–π',
    'violet': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    'purple': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    'gray': '—Å–µ—Ä—ã–π',
    'grey': '—Å–µ—Ä—ã–π',
    'white': '–±–µ–ª—ã–π',
    'gold': '–∑–æ–ª–æ—Ç–æ–π',
    'silver': '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π'
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
user_context = {}

def convert_colors_to_russian(colors):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    russian_colors = []
    for color in colors:
        color_lower = color.lower()
        if color_lower in EN_TO_RU_COLORS:
            russian_colors.append(EN_TO_RU_COLORS[color_lower])
        else:
            # –ï—Å–ª–∏ —Ü–≤–µ—Ç —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            russian_colors.append(color)
    return russian_colors

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_context[user_id] = 'main'  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    
    welcome_text = """
ü§ñ *Resistor Bot* - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üé® *–¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã:*
  ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É
  ‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ

üî§ *SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã:*
  ‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –≤ –Ω–æ–º–∏–Ω–∞–ª
  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ E24, E96 —Å–µ—Ä–∏–π

üì∑ *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ:*
  ‚Ä¢ –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã (—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã)
  ‚Ä¢ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã)

*–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:*
`/throughhole` - —Ä–∞–±–æ—Ç–∞ —Å —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º–∏
`/smd` - —Ä–∞–±–æ—Ç–∞ —Å SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º–∏  
`/photo` - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ
    """
    
    keyboard = [
        [InlineKeyboardButton("üé® –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ", callback_data="throughhole")],
        [InlineKeyboardButton("üî§ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã", callback_data="smd")],
        [InlineKeyboardButton("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photo")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "throughhole":
        user_context[user_id] = 'throughhole'
        text = """
üé® *–†–µ–∂–∏–º: –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã*

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ –¶–≤–µ—Ç–∞ –ø–æ–ª–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–∞
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏

*–ü—Ä–∏–º–µ—Ä—ã:*
`–∫—Ä–∞—Å–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∂–µ–ª—Ç—ã–π –∑–æ–ª–æ—Ç–æ–π`
`1.5–∫` 
`470 –û–º`
`2.2–ú`
        """
        
    elif query.data == "smd":
        user_context[user_id] = 'smd'
        text = """
üî§ *–†–µ–∂–∏–º: SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã*

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ SMD –∫–æ–¥ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤:*
`103` = 10 –∫–û–º
`4R7` = 4.7 –û–º  
`01C` = 10 –∫–û–º (E96)
`R047` = 0.047 –û–º

*–ü—Ä–∏–º–µ—Ä—ã –Ω–æ–º–∏–Ω–∞–ª–æ–≤:*
`10–∫`, `4.7 –û–º`, `100–∫`, `0.47`
        """
        
    elif query.data == "photo":
        user_context[user_id] = 'photo'
        text = """
üì∑ *–†–µ–∂–∏–º: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:
‚Ä¢ –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ (—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã)
‚Ä¢ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–¥)

*–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ñ–æ–Ω
‚Ä¢ –ü—Ä—è–º–æ–π —É–≥–æ–ª —Å—ä–µ–º–∫–∏

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞.
        """
        
    elif query.data == "help":
        user_context[user_id] = 'main'
        text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
`/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
`/throughhole` - —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã  
`/smd` - SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã
`/photo` - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
–¶–≤–µ—Ç–∞ ‚Üí –ù–æ–º–∏–Ω–∞–ª: `–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —á–µ—Ä–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π`
–ù–æ–º–∏–Ω–∞–ª ‚Üí –¶–≤–µ—Ç–∞: `1–∫`, `470 –û–º`
SMD –∫–æ–¥ ‚Üí –ù–æ–º–∏–Ω–∞–ª: `103`, `4R7`
–ù–æ–º–∏–Ω–∞–ª ‚Üí SMD –∫–æ–¥: `10–∫`, `4.7 –û–º`

*–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞. –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ñ–æ–Ω
‚Ä¢ –ß–µ—Ç–∫–æ –≤–∏–¥–∏–º—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç
        """
    
    elif query.data == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        user_context[user_id] = 'main'
        welcome_text = """
ü§ñ *Resistor Bot* - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
        """
        keyboard = [
            [InlineKeyboardButton("üé® –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ", callback_data="throughhole")],
            [InlineKeyboardButton("üî§ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã", callback_data="smd")],
            [InlineKeyboardButton("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photo")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=welcome_text, 
            parse_mode='Markdown', 
            reply_markup=reply_markup
        )
        return
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_context[user_id] = 'main'
        await start(update, context)
        return
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text, 
        parse_mode='Markdown', 
        reply_markup=reply_markup
    )

async def throughhole_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    user_context[user_id] = 'throughhole'
    
    help_text = """
üé® *–†–µ–∂–∏–º: –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã*

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ –¶–≤–µ—Ç–∞ –ø–æ–ª–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–∞
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏

*–ü—Ä–∏–º–µ—Ä—ã:*
`–∫—Ä–∞—Å–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∂–µ–ª—Ç—ã–π –∑–æ–ª–æ—Ç–æ–π`
`1.5–∫` 
`470 –û–º`
`2.2–ú`
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def smd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    user_context[user_id] = 'smd'
    
    help_text = """
üî§ *–†–µ–∂–∏–º: SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã*

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ SMD –∫–æ–¥ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
‚Ä¢ –ù–æ–º–∏–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤:*
`103` = 10 –∫–û–º
`4R7` = 4.7 –û–º  
`01C` = 10 –∫–û–º (E96)
`R047` = 0.047 –û–º

*–ü—Ä–∏–º–µ—Ä—ã –Ω–æ–º–∏–Ω–∞–ª–æ–≤:*
`10–∫`, `4.7 –û–º`, `100–∫`, `0.47`
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def photo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    user_context[user_id] = 'photo'
    
    help_text = """
üì∑ *–†–µ–∂–∏–º: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:
‚Ä¢ –¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ (—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã)
‚Ä¢ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–¥)

*–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ñ–æ–Ω
‚Ä¢ –ü—Ä—è–º–æ–π —É–≥–æ–ª —Å—ä–µ–º–∫–∏

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞.
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    user_context[user_id] = 'main'
    
    help_text = """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
`/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
`/throughhole` - —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã  
`/smd` - SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã
`/photo` - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
–¶–≤–µ—Ç–∞ ‚Üí –ù–æ–º–∏–Ω–∞–ª: `–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —á–µ—Ä–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π`
–ù–æ–º–∏–Ω–∞–ª ‚Üí –¶–≤–µ—Ç–∞: `1–∫`, `470 –û–º`
SMD –∫–æ–¥ ‚Üí –ù–æ–º–∏–Ω–∞–ª: `103`, `4R7`
–ù–æ–º–∏–Ω–∞–ª ‚Üí SMD –∫–æ–¥: `10–∫`, `4.7 –û–º`

*–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞. –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ñ–æ–Ω
‚Ä¢ –ß–µ—Ç–∫–æ –≤–∏–¥–∏–º—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

def colors_to_resistance(colors):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–æ–º–∏–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞"""
    try:
        colors = [color.lower() for color in colors]
        
        if len(colors) == 4:  # 4-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
            digit1 = COLOR_CODES[colors[0]]
            digit2 = COLOR_CODES[colors[1]]
            multiplier = MULTIPLIERS[colors[2]]
            tolerance = TOLERANCE.get(colors[3], '¬±20%')
            
            resistance = (digit1 * 10 + digit2) * multiplier
            
        elif len(colors) == 5:  # 5-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
            digit1 = COLOR_CODES[colors[0]]
            digit2 = COLOR_CODES[colors[1]]
            digit3 = COLOR_CODES[colors[2]]
            multiplier = MULTIPLIERS[colors[3]]
            tolerance = TOLERANCE.get(colors[4], '¬±20%')
            
            resistance = (digit1 * 100 + digit2 * 10 + digit3) * multiplier
            
        else:
            return None, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 4 –∏–ª–∏ 5 —Ü–≤–µ—Ç–æ–≤."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if resistance >= 1000000:
            result = f"{resistance / 1000000:.2f} –ú–û–º"
        elif resistance >= 1000:
            result = f"{resistance / 1000:.2f} –∫–û–º"
        else:
            result = f"{resistance:.0f} –û–º"
            
        return result, tolerance
        
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–æ–≤."

def resistance_to_colors(resistance_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞ –≤ —Ü–≤–µ—Ç–æ–≤—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        match = re.search(r'(\d+\.?\d*)\s*([–∫–ºkKmM]?)\s*[–æ–ûoOmM]?', resistance_str)
        if not match:
            return None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: '1–∫', '470 –û–º', '2.2–ú'"
        
        value, unit = match.groups()
        value = float(value)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –û–º—ã
        if unit and unit.lower() in ['–∫', 'k']:
            value *= 1000
        elif unit and unit.lower() in ['–º', 'm']:
            value *= 1000000
        
        resistance = int(value)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (4 –∏–ª–∏ 5 –ø–æ–ª–æ—Å)
        if resistance < 100:
            # 4-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
            digit1 = resistance // 10
            digit2 = resistance % 10
            digits = [digit1, digit2]
            num_bands = 4
        else:
            # 5-–ø–æ–ª–æ—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            digits = []
            temp = resistance
            while temp > 0 and len(digits) < 3:
                digits.insert(0, temp % 10)
                temp //= 10
            while len(digits) < 3:
                digits.insert(0, 0)
            num_bands = 5
        
        # –ù–∞—Ö–æ–¥–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        multiplier_exp = len(str(resistance)) - len(digits)
        multiplier_value = 10 ** multiplier_exp
        
        # –ò—â–µ–º —Ü–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
        reverse_color_map = {v: k for k, v in COLOR_CODES.items() if v >= 0 and k in ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–∂–µ–ª—Ç—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–ª—ã–π']}
        reverse_multiplier_map = {v: k for k, v in MULTIPLIERS.items() if k in ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–∂–µ–ª—Ç—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–ª—ã–π', '–∑–æ–ª–æ—Ç–æ–π', '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π']}
        
        colors = []
        for digit in digits[:2] if num_bands == 4 else digits[:3]:
            color = reverse_color_map.get(digit)
            if color:
                colors.append(color)
        
        # –¶–≤–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è
        multiplier_color = reverse_multiplier_map.get(multiplier_value)
        if not multiplier_color:
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π
            possible_multipliers = [(abs(k - multiplier_value), v) for k, v in MULTIPLIERS.items() if k not in [0.1, 0.01] and k in ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–∂–µ–ª—Ç—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–ª—ã–π']]
            possible_multipliers.sort()
            multiplier_color = possible_multipliers[0][1] if possible_multipliers else '—á–µ—Ä–Ω—ã–π'
        
        colors.append(multiplier_color)
        colors.append('–∑–æ–ª–æ—Ç–æ–π')  # –î–æ–ø—É—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return colors, num_bands
        
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞: {str(e)}"

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_context = user_context.get(user_id, 'main')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    words = text.lower().split()
    
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Ü–≤–µ—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ü–≤–µ—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if words and all(word in COLOR_CODES for word in words):
        # –ó–∞–ø—Ä–æ—Å —Å —Ü–≤–µ—Ç–∞–º–∏ - —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–∏—Å—Ç–æ—Ä
        resistance, tolerance = colors_to_resistance(words)
        if resistance:
            response = f"üéØ *–ù–æ–º–∏–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞:* {resistance}\nüìä *–î–æ–ø—É—Å–∫:* {tolerance}"
        else:
            response = tolerance
            
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω SMD –∫–æ–¥ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ SMD –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    elif validate_smd_code(text):
        # SMD –∫–æ–¥
        result = smd_to_resistance(text)
        if result:
            value, code_type = result
            response = f"üî§ *SMD –∫–æ–¥:* `{text.upper()}`\nüíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\nüìã *–¢–∏–ø:* {code_type}"
        else:
            response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å SMD –∫–æ–¥: `{text}`"
            
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    elif current_context == 'throughhole':
        # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        colors, num_bands = resistance_to_colors(text)
        if colors:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç–∞ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            russian_colors = convert_colors_to_russian(colors)
            colors_str = ' ‚Üí '.join(russian_colors)
            band_type = "4-–ø–æ–ª–æ—Å–Ω–æ–π" if num_bands == 4 else "5-–ø–æ–ª–æ—Å–Ω–æ–π"
            response = f"üé® *–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞* ({band_type}):\n`{colors_str}`"
        else:
            response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏.\n\n"
                      "–ü—Ä–∏–º–µ—Ä—ã:\n"
                      "‚Ä¢ `1–∫` ‚Üí 1000 –û–º\n"
                      "‚Ä¢ `470 –û–º` ‚Üí 470 –û–º\n"
                      "‚Ä¢ `2.2–ú` ‚Üí 2.2 –ú–û–º")
            
    elif current_context == 'smd':
        # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è SMD –∫–æ–¥–∞
        smd_result = resistance_to_smd(text)
        if smd_result and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in smd_result and "–û—à–∏–±–∫–∞" not in smd_result:
            if isinstance(smd_result, tuple) and len(smd_result) == 3:
                value, codes, series = smd_result
                codes_str = "\n".join([f"‚Ä¢ `{code}` ({s})" for code, s in zip(codes, series)])
                response = f"üíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\nüî§ *SMD –∫–æ–¥—ã:*\n{codes_str}"
            else:
                response = f"üíé {smd_result}"
        else:
            response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SMD –∫–æ–¥.\n\n"
                      "–ü—Ä–∏–º–µ—Ä—ã:\n"
                      "‚Ä¢ `10–∫` ‚Üí 103, 01C\n"
                      "‚Ä¢ `4.7 –û–º` ‚Üí 4R7\n"
                      "‚Ä¢ `100–∫` ‚Üí 104, 01D")
    
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ SMD
        smd_result = resistance_to_smd(text)
        if smd_result and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in smd_result and "–û—à–∏–±–∫–∞" not in smd_result:
            if isinstance(smd_result, tuple) and len(smd_result) == 3:
                value, codes, series = smd_result
                codes_str = "\n".join([f"‚Ä¢ `{code}` ({s})" for code, s in zip(codes, series)])
                response = f"üíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\nüî§ *SMD –∫–æ–¥—ã:*\n{codes_str}"
            else:
                response = f"üíé {smd_result}"
        else:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π
            colors, num_bands = resistance_to_colors(text)
            if colors:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç–∞ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                russian_colors = convert_colors_to_russian(colors)
                colors_str = ' ‚Üí '.join(russian_colors)
                band_type = "4-–ø–æ–ª–æ—Å–Ω–æ–π" if num_bands == 4 else "5-–ø–æ–ª–æ—Å–Ω–æ–π"
                response = f"üé® *–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞* ({band_type}):\n`{colors_str}`"
            else:
                response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å.\n\n"
                          "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
                          "‚Ä¢ –¶–≤–µ—Ç–∞ –ø–æ–ª–æ—Å: `–∫—Ä–∞—Å–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∂–µ–ª—Ç—ã–π –∑–æ–ª–æ—Ç–æ–π`\n"
                          "‚Ä¢ –ù–æ–º–∏–Ω–∞–ª: `1–∫`, `470 –û–º`\n"
                          "‚Ä¢ SMD –∫–æ–¥: `103`, `4R7`\n\n"
                          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞:\n"
                          "`/throughhole` - —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã\n"
                          "`/smd` - SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã")
    
    await update.message.reply_text(response, parse_mode='Markdown')

def preprocess_image_for_ocr(image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR"""
    img = np.array(image)
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    l = clahe.apply(l)
    lab = cv2.merge((l, a, b))
    img = cv2.cvtColor(lab, cv2.COLOR_LAB2BGR)
    
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    return Image.fromarray(img)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CV –∏ OCR"""
    try:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –¥–ª—è OpenCV
        nparr = np.frombuffer(photo_bytes, np.uint8)
        image_cv = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–∏—Å—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é CV
        cv_result = recognize_resistor_cv(image_cv)
        
        if cv_result and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in cv_result and "–û—à–∏–±–∫–∞" not in cv_result:
            response = f"üì∑ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (CV):*\n{cv_result}"
            await update.message.reply_text(response, parse_mode='Markdown')
            return
        
        # –ï—Å–ª–∏ CV –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º OCR –¥–ª—è SMD –∫–æ–¥–æ–≤
        await update.message.reply_text("üëÅÔ∏è –ü—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç...")
        
        image_pil = Image.open(io.BytesIO(photo_bytes))
        processed_image = preprocess_image_for_ocr(image_pil)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è SMD –∫–æ–¥–æ–≤
        custom_config = r'--oem 3 --psm 8 -c tessedit_char_whitelist=0123456789RrMmKkFfABCDEFGHXYZabcxyz.-'
        text = pytesseract.image_to_string(processed_image, config=custom_config)
        
        # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        cleaned_text = re.sub(r'[^\w\.\-]', '', text.strip())
        
        if cleaned_text and len(cleaned_text) >= 2:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ SMD –∫–æ–¥
            if validate_smd_code(cleaned_text):
                result = smd_to_resistance(cleaned_text)
                if result:
                    value, code_type = result
                    response = (f"üì∑ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (OCR):*\n"
                              f"üî§ *SMD –∫–æ–¥:* `{cleaned_text.upper()}`\n"
                              f"üíé *–ù–æ–º–∏–Ω–∞–ª:* {value}\n"
                              f"üìã *–¢–∏–ø:* {code_type}")
                else:
                    response = f"üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: `{cleaned_text}`\n–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å SMD –∫–æ–¥."
            else:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª
                colors, num_bands = resistance_to_colors(cleaned_text)
                if colors:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç–∞ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    russian_colors = convert_colors_to_russian(colors)
                    colors_str = ' ‚Üí '.join(russian_colors)
                    band_type = "4-–ø–æ–ª–æ—Å–Ω–æ–π" if num_bands == 4 else "5-–ø–æ–ª–æ—Å–Ω–æ–π"
                    response = (f"üì∑ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* `{cleaned_text}`\n"
                              f"üé® *–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞* ({band_type}):\n`{colors_str}`")
                else:
                    response = f"üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: `{cleaned_text}`\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–∏–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞."
        else:
            response = ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ–∑–∏—Å—Ç–æ—Ä –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n"
                       "*–°–æ–≤–µ—Ç—ã:*\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª–æ—Å—ã –∏–ª–∏ –∫–æ–¥ —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã\n"
                       "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–º —Ñ–æ–Ω–µ")
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("throughhole", throughhole_command))
        application.add_handler(CommandHandler("smd", smd_command))
        application.add_handler(CommandHandler("photo", photo_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SMD —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤!")
        print("=" * 50)
        print("ü§ñ Resistor Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram")
        print("üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)
        
        application.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()